// Generated by gencpp from file pub_sub/Spacecraft.msg
// DO NOT EDIT!


#ifndef PUB_SUB_MESSAGE_SPACECRAFT_H
#define PUB_SUB_MESSAGE_SPACECRAFT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pub_sub
{
template <class ContainerAllocator>
struct Spacecraft_
{
  typedef Spacecraft_<ContainerAllocator> Type;

  Spacecraft_()
    : name()
    , stage(0)
    , atmosphere_pressure(0.0)
    , velocity(0.0)  {
    }
  Spacecraft_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , stage(0)
    , atmosphere_pressure(0.0)
    , velocity(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef int32_t _stage_type;
  _stage_type stage;

   typedef float _atmosphere_pressure_type;
  _atmosphere_pressure_type atmosphere_pressure;

   typedef float _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::pub_sub::Spacecraft_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pub_sub::Spacecraft_<ContainerAllocator> const> ConstPtr;

}; // struct Spacecraft_

typedef ::pub_sub::Spacecraft_<std::allocator<void> > Spacecraft;

typedef boost::shared_ptr< ::pub_sub::Spacecraft > SpacecraftPtr;
typedef boost::shared_ptr< ::pub_sub::Spacecraft const> SpacecraftConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pub_sub::Spacecraft_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pub_sub::Spacecraft_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pub_sub::Spacecraft_<ContainerAllocator1> & lhs, const ::pub_sub::Spacecraft_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.stage == rhs.stage &&
    lhs.atmosphere_pressure == rhs.atmosphere_pressure &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pub_sub::Spacecraft_<ContainerAllocator1> & lhs, const ::pub_sub::Spacecraft_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pub_sub

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pub_sub::Spacecraft_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pub_sub::Spacecraft_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pub_sub::Spacecraft_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pub_sub::Spacecraft_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pub_sub::Spacecraft_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pub_sub::Spacecraft_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pub_sub::Spacecraft_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db0eadb26c1269c190f69829aca84a1f";
  }

  static const char* value(const ::pub_sub::Spacecraft_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb0eadb26c1269c1ULL;
  static const uint64_t static_value2 = 0x90f69829aca84a1fULL;
};

template<class ContainerAllocator>
struct DataType< ::pub_sub::Spacecraft_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pub_sub/Spacecraft";
  }

  static const char* value(const ::pub_sub::Spacecraft_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pub_sub::Spacecraft_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"int32 stage\n"
"float32 atmosphere_pressure\n"
"float32 velocity\n"
;
  }

  static const char* value(const ::pub_sub::Spacecraft_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pub_sub::Spacecraft_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.stage);
      stream.next(m.atmosphere_pressure);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Spacecraft_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pub_sub::Spacecraft_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pub_sub::Spacecraft_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "stage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stage);
    s << indent << "atmosphere_pressure: ";
    Printer<float>::stream(s, indent + "  ", v.atmosphere_pressure);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PUB_SUB_MESSAGE_SPACECRAFT_H
