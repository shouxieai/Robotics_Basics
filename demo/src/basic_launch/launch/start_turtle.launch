<launch>
    <!-- 启动的节点 -->
    <!-- respawn="true" 节点关闭后自动重启 -->
    <!-- required="true" 节点推出后，关闭整个系统 -->
    <!-- ns="hello" 设置节点的命名空间-->
    <!--param使用： 向参数服务器设置参数-->
    <!--格式1：launch 下 node外 有不同-->
    <param name="param_A" type="int" value="100" />

    <!-- rosparm 的使用: 格式1 launch下 操作参数服务器数据-->
    <rosparam command="load" file="$(find basic_launch)/launch/params.yaml" />

    <node pkg="turtlesim" type="turtlesim_node" name="my_turtle" output="screen">
        <remap from="/turtle1/cmd_vel" to="/cmd_vel" />
        <!--格式2: node下-->
        <param name="param_B" type="double" value="3.14" />
        <!--rosparm 的使用: 格式2 node下-->
        <rosparam command="load" file="$(find basic_launch)/launch/params.yaml" />

    </node>
    <!-- keyborad control node-->
    <node pkg="turtlesim" type="turtlesim_teleop" name="my_key" output="screen" />
</launch>

<!-- 
 Notes:[about using param]
    after roslaunch the launch file, type in rosparam list
    
    /my_turtle/background_b
    /my_turtle/background_g
    /my_turtle/background_r
    /my_turtle/param_B <=======
    /param_A <======
    /rosdistro
    /roslaunch/uris/host_59b33b7f8ba7__39199
    /rosversion
    /run_id

    

 -->



<!--Notes:[about using built-in teleop] here we start the teleop special for turtle
. But sometimes we don't want it. Instead we use the built-in
and more general teleop to control the robot

use rostopic list
we see that
start_turtial.launch is on the topic /turtlel/cmd_vel

/cmd_vel
/rosout
/rosout_agg
/turtle1/cmd_vel
/turtle1/color_sensor
/turtle1/pose

However 
rosrun teleop_twist_keyboard teleop_twist_keyboard.py [the built-in general teleop]

Waiting for subscriber to connect to /cmd_vel
it's cmd_vel.

therefore, we need to remap the turtle/cmd_vel to cmd_vel

-->

